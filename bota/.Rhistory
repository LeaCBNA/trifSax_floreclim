# on transpose le data frame
t_dat_prabs_18 <- as.data.frame(t(dat_prabs_18))
t_dat_prabs_21 <- as.data.frame(t(dat_prabs_21))
t_dat_prabs <- as.data.frame(t(dat_prabs))
x <- c("BER_carr","BER_cari","BER_clap","BER_lac1","BER_lac2",
"VAL_eyme","MAU_arpo","MAU_plah","VAL_glab","VAL_moba",
"VIL_bas","VIL_haut","VAL_eyto","MAU_plto","VAL_moha")
y <- c("BER_carr","BER_cari","BER_clap","BER_lacrip",
"VAL_eyme","MAU_arpo","MAU_plah","VAL_glab","VAL_moba",
"VIL_bas","VIL_haut","VAL_eyto","MAU_plto","VAL_moha")
rownames(t_dat_prabs_18) <- x
rownames(t_dat_prabs_21) <- x
rich_18 <- rowSums(t_dat_prabs_18)
site_18 <- rownames(t_dat_prabs_18)
rich_21 <- rowSums(t_dat_prabs_21)
richness <- data.frame(site_18, rich_18, rich_21)
secteur <- c(rep("VENEON",5), "VALLOUISE", rep("MAURIENNE",2), rep("VALLOUISE",2), rep("VILLAROGER",2),"VALLOUISE","MAURIENNE","VALLOUISE")
richness$secteur <- secteur
richness$secteur <- as.factor(richness$secteur)
richness_long <- richness %>% pivot_longer(
cols = paste0(c("rich_18", "rich_21")), names_to = "year",
names_prefix = "rich_", values_to = "rich",
values_drop_na = FALSE)
student_rich <- t.test(rich_18, rich_21, paired = TRUE)
beta_18 <- vegdist(t_dat_prabs_18, binary = TRUE, method = "jaccard")
beta_18
mb18 <- mean(beta_18)
beta_21 <- vegdist(na.omit(t_dat_prabs_21), binary = TRUE, method = "jaccard")
beta_21
mb21 <- mean(beta_21)
# https://stats.stackexchange.com/questions/195446/choosing-the-right-linkage-method-for-hierarchical-clustering/217742#217742
# https://stats.stackexchange.com/questions/195456/how-to-select-a-clustering-method-how-to-validate-a-cluster-solution-to-warran/195481#195481
# https://www.datanovia.com/en/lessons/agglomerative-hierarchical-clustering/
t_dat_prabs_clus_18 <- hclust(beta_18, method = "complete")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="Complete joining cluster")
t_dat_prabs_coph_18 <- cophenetic(t_dat_prabs_clus_18)
cor(beta_18, t_dat_prabs_coph_18)
#
t_dat_prabs_clus_av_18 <- hclust(beta_18, method = "average")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_av_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="Average joining cluster")
t_dat_prabs_coph_av_18 <- cophenetic(t_dat_prabs_clus_av_18)
cor(beta_18, t_dat_prabs_coph_av_18) # average method is better
#
t_dat_prabs_clus_ward_18 <- hclust(beta_18, method = "ward.D")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_ward_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="Ward D joining cluster")
t_dat_prabs_coph_ward_18 <- cophenetic(t_dat_prabs_clus_ward_18)
cor(beta_18, t_dat_prabs_coph_ward_18) # moins bien
#
t_dat_prabs_clus_ward_18 <- hclust(beta_18, method = "ward.D2")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_ward_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="Ward D2 joining cluster")
t_dat_prabs_coph_ward_18 <- cophenetic(t_dat_prabs_clus_ward_18)
cor(beta_18, t_dat_prabs_coph_ward_18) # comme complete
#
t_dat_prabs_clus_sing_18 <- hclust(beta_18, method = "single")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_sing_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="Single joining cluster")
t_dat_prabs_coph_sing_18 <- cophenetic(t_dat_prabs_clus_sing_18)
cor(beta_18, t_dat_prabs_coph_sing_18) # comme complete
#
t_dat_prabs_clus_med_18 <- hclust(beta_18, method = "median")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_med_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="WPGMC joining cluster")
t_dat_prabs_coph_med_18 <- cophenetic(t_dat_prabs_clus_med_18)
cor(beta_18, t_dat_prabs_coph_med_18) # nul
#
t_dat_prabs_clus_quit_18 <- hclust(beta_18, method = "mcquitty")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_quit_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="WPGMA joining cluster")
t_dat_prabs_coph_quit_18 <- cophenetic(t_dat_prabs_clus_quit_18)
cor(beta_18, t_dat_prabs_coph_quit_18) # pas mal ! comme average presque mais en + le plot a une meilleure t?te
#
t_dat_prabs_clus_cent_18 <- hclust(beta_18, method = "centroid")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_cent_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="UPGMC joining cluster")
t_dat_prabs_coph_cent_18 <- cophenetic(t_dat_prabs_clus_cent_18)
cor(beta_18, t_dat_prabs_coph_cent_18) # pourri
t_dat_prabs_clus_quit_18 <- hclust(beta_18, method = "mcquitty")
par(mar=c(6,4,2,2))
plot(t_dat_prabs_clus_quit_18, hang = -1, main="Jaccard Beta diversity ", ylab="Beta values",
xlab="T_sax community sample", sub="WPGMA joining cluster")
t_dat_prabs_coph_quit_18 <- cophenetic(t_dat_prabs_clus_quit_18)
cor(beta_18, t_dat_prabs_coph_quit_18)
fviz_dend(t_dat_prabs_clus_quit_18, k = 8, palette = "Paired", cex = 0.75, lwd = 1.5,
color_labels_by_k = FALSE, ylab = "Beta values",
main = "Jaccard Beta diversity - WPGMA joining cluster - 2018")
# https://rdrr.io/cran/goeveg/man/dimcheckMDS.html
# avec deux dimensions on n'est pas trop mal meme si 3 seraient bien
# https://jonlefcheck.net/2012/10/24/nmds-tutorial-in-r/
dimcheckMDS(t_dat_prabs_18, distance = "jaccard", k = 6, trymax = 100, autotransform = FALSE)
NMDS_18 <- metaMDS(t_dat_prabs_18, distance = "jaccard", binary = TRUE, trymax = 100, k = 2)
NMDS_18 # on passe d'un stress de 0.11 avec 3 dimensions, a un stress de 0.18 avec deux dimensions
stressplot(NMDS_18)
secteur <- c(rep("VENEON",5), "VALLOUISE", rep("MAURIENNE",2), rep("VALLOUISE",2), rep("VILLAROGER",2),"VALLOUISE","MAURIENNE","VALLOUISE")
# secteurs
ordiplot(NMDS_18, type = "n")
orditorp(NMDS_18, display = "species", col = "black", air = 0.01, label = F)
orditorp(NMDS_18, display = "sites",
col = c(rep("turquoise4",5), "orange", rep("olivedrab3",2), rep("orange",2), rep("blueviolet",2), "orange", "olivedrab3", "orange"),
air = 0.01, cex = 1.25)
# clustering
ordiplot(NMDS_18, type="n")
ordicluster(NMDS_18, hclust(vegdist(t_dat_prabs_18, binary = TRUE, method = "jaccard"), method = "mcquitty"))
orditorp(NMDS_18, display ="species",col = "black", air = 0.01, label = F)
orditorp(NMDS_18, display = "sites",
col = c(rep("turquoise4",5), "orange", rep("olivedrab3",2), rep("orange",2), rep("blueviolet",2), "orange", "olivedrab3", "orange"),
air = 0.01, cex = 1.25)
# Extraction des données pour pouvoir utiliser ggplot
data.scores_18 <- as.data.frame(scores(NMDS_18))  # Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores_18$site <- rownames(data.scores_18)  # create a column of site names, from the rownames of data.scores
head(data.scores_18)  # look at the data
species.scores_18 <- as.data.frame(scores(NMDS_18, "species"))  # Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores_18$species <- rownames(species.scores_18)  # create a column of species, from the rownames of species.scores
head(species.scores_18)  # look at the data
# display.brewer.pal(n = 9, "Paired")
# brewer.pal(n = 9, "Paired")
col_paired <- c(rep("turquoise4",5), "orange", rep("olivedrab3",2), rep("orange",2), rep("blueviolet",2), "orange", "olivedrab3", "orange")
ggplot() +
geom_point(data = data.scores_18, aes(x=NMDS1, y=NMDS2), size = 4, shape = 17, col = col_paired) +
geom_label_repel(data = data.scores_18, aes(x=NMDS1, y=NMDS2,label=site), size= 4, vjust=0) +
geom_point(data = species.scores_18, aes(x=NMDS1, y=NMDS2), color = "black", size = 2)
d_18 <- betadiver(t_dat_prabs_18, "w") ## This should be equal to Sorensen index (binary Bray-Curtis in vegan)
d_21 <- betadiver(t_dat_prabs_21, "w") ## This should be equal to Sorensen index (binary Bray-Curtis in vegan)
d_18
d_21
ms18 <- mean(d_18)
ms21 <- mean(d_21)
# voir :
## https://sites.google.com/site/mb3gustame/hypothesis-tests/the-mantel-test
## https://mb3is.megx.net/gustame/dissimilarity-based-methods/nmds
ggplot(richness_long, aes(x = site_18, y = rich, fill = year)) +
geom_bar(stat = "identity", width =.4, position=position_dodge(), size = 1) +
scale_fill_manual(values = c("olivedrab3","orange","turquoise4","blueviolet")) +
theme(legend.position = "right", axis.text.x = element_text(angle = 90)) +
xlab("Site") +
ylab("Specific richness") +
annotate("text", x = 4.2, y = 35, label = "P-value Student T.test Specific richness : ") +
annotate("text", x = 8.5, y = 35, label = round(student_rich$p.value, 4))
# On ne peut mettre qu'un seul tableau en entrée de vegdist, il faut donc ruser pour calculer les distances de Jaccard entre chaque site (année 1 vs année 2)
taxons <- rownames(dat_prabs_21)
colnames(dat_prabs_18) <- paste0(colnames(dat_prabs_18),"18")
colnames(dat_prabs_21) <- paste0(colnames(dat_prabs_21),"21")
dat <- vector("list", 14) # on ne prend pas en compte "lac torrent" détruite en 2021
for (i in 1:14) {
dat[[i]] <- cbind(dat_prabs_18[,-5][i],dat_prabs_21[,-5][i])
}
names(dat) <- y
# On a un data frame par site pour les deux années.
t_dat <- vector ("list", length(dat))
for (i in 1:14) {
t_dat[[i]] <- (t(as.data.frame(dat[i])))
t_dat[[i]] <- as.data.frame(as.matrix(t_dat[[i]]))
}
names(t_dat) <- paste0(y,"_t")
# Et la meme chose transposee
# Maintenant on fait la boucle pour calculer les distances sur chaque tableau
v_dist <- vector("numeric", length(t_dat))
for (i in 1:14) {
v_dist[[i]] <- vegdist(t_dat[[i]], binary = TRUE, method = "jaccard")
}
names(v_dist) <- y
df_v_dist <- as.data.frame(v_dist)
colnames(df_v_dist) <- "Dist_Jaccard"
df_v_dist <- df_v_dist[order(rownames(df_v_dist)), , drop = F]
df_v_dist %>%
kbl() %>%
kable_paper(full_width = F) %>%
column_spec(2, color =  spec_color(df_v_dist$Dist_Jaccard, begin = 0, end = 1)) %>%
pack_rows("VENEON", 1,4) %>%
pack_rows("MAURIENNE", 5,7) %>%
pack_rows("VALLOUISE", 8,12) %>%
pack_rows("VILLAROGER", 13,14)
## POUR 2018
# barplot(specnumber(t_dat_prabs_18), las = 2) # species richness
specpool(t_dat_prabs_18, smallsample = TRUE) # c'est pareil avec ou sans le small sample
#estimateR(t_dat_prabs_18)
#accum18 <- specaccum(t_dat_prabs_18, method = "random")
#plot(accum18, random = FALSE, ci.type = "polygon", ci.col = "grey", col = "red")
#preston18 <- prestonfit(colSums(t_dat_prabs_18))
#plot(preston18)
#veiledspec(preston18)
## POUR 2021
specpool(na.omit(t_dat_prabs_21), smallsample = TRUE)
# ?
rs_18 <- rowSums(dat_prabs_18)
taxons_18 <- as.data.frame(rownames(dat_prabs_18))
taxons_18$somme <- rs_18
supp_18 <- which(taxons_18$somme == 0)
taxons_18 <- taxons_18[-supp_18,]
tax_18 <- taxons_18[,1]
rs_21 <- rowSums(dat_prabs_21)
taxons_21 <- as.data.frame(rownames(dat_prabs_21))
taxons_21$somme <- rs_21
supp_21 <- which(taxons_21$somme == 0)
taxons_21 <- taxons_21[-supp_21,]
tax_21 <- taxons_21[,1]
#
# création de vecteurs contenant la liste des espèces pour chaque site et chaque année
dat_prabs_18_tax <- dat_prabs_18[,-16]
for (j in 1:ncol(dat_prabs_18_tax)){
for (i in 1:nrow(dat_prabs_18_tax)){
if (dat_prabs_18_tax[i,j] > 0)
dat_prabs_18_tax[i,j] <- rownames(dat_prabs_18_tax[i,])
else NULL
}}
dat_prabs_18_tax[dat_prabs_18_tax == 0] <- NA
dat_prabs_21_tax <- dat_prabs_21[,-5] # on enlève encore lac torrent
for (j in 1:ncol(dat_prabs_21_tax)){
for (i in 1:nrow(dat_prabs_21_tax)){
if (dat_prabs_21_tax[i,j] > 0)
dat_prabs_21_tax[i,j] <- rownames(dat_prabs_21_tax[i,])
else NULL
}}
dat_prabs_21_tax[dat_prabs_21_tax == 0] <- NA
chr_list_18 = list()
for (j in 1:ncol(dat_prabs_18_tax)) {
chr_18 <- na.omit(dat_prabs_18_tax[,j])
chr_list_18[[j]] = chr_18
}
names(chr_list_18) <- paste(colnames(dat_prabs_18_tax), sep='')
chr_list_21 = list()
for (j in 1:ncol(dat_prabs_21_tax)) {
chr_21 <- na.omit(dat_prabs_21_tax[,j])
chr_list_21[[j]] = chr_21
}
names(chr_list_21) <- paste(colnames(dat_prabs_21_tax), sep='')
# Elements communs
intersect(chr_list_21$EYCH_meleze21, chr_list_18$EYCH_meleze18)
# Elements dans 21 mais pas dans 18
setdiff(chr_list_21$EYCH_meleze21, chr_list_18$EYCH_meleze18)
# Elements dans 18 mais pas dans 21
setdiff(chr_list_18$EYCH_meleze18, chr_list_21$EYCH_meleze21)
dat_pourc <- read.table("data_bota_pourc.csv", header=T, sep=";", dec=".")
dat_pourc[dat_pourc=="+"] <- 0.1 # remplacement du + BB pour faire le BBtransf
dat_pourc[dat_pourc==""] <- 0 # remplacement du + BB pour faire le BBtransf
# Gestion des NAs
dat_pourc[,5][is.na(dat_pourc[,5])] <- 0 # Probleme de NA avec la colonne 5
which(is.na(dat_pourc),arr.ind=TRUE) # Remplacement des NA par leur valeur de 2021
dat_pourc[131,6] <- dat_pourc[274,6]
dat_pourc[135,9] <- dat_pourc[277,9]
dat_pourc[95,10] <- dat_pourc[237,10]
dat_pourc[105,10] <- dat_pourc[243,10]
dat_pourc[132,10] <- dat_pourc[274,10]
dat_pourc[136,10] <- dat_pourc[278,10]
dat_pourc[125,11] <- dat_pourc[267,11]
# Nice
d18 <- which(dat_pourc$year == "2018")
dat_pourc_18 <- dat_pourc[d18,]
d21 <- which(dat_pourc$year == "2021")
dat_pourc_21 <- dat_pourc[d21,]
dat_pourc_18 <- t(dat_pourc_18[,-2])
colnames(dat_pourc_18) <- dat_pourc_18[1,]
dat_pourc_18 <- dat_pourc_18[-1,]
dat_pourc_18 <- as.data.frame(dat_pourc_18)
dat_pourc_21 <- t(dat_pourc_21[,-2])
colnames(dat_pourc_21) <- dat_pourc_21[1,]
dat_pourc_21 <- dat_pourc_21[-1,]
dat_pourc_21 <- as.data.frame(dat_pourc_21)
dat_pourc <- rbind.data.frame(dat_pourc_18, dat_pourc_21)
year <- c(rep("2018",18), rep("2021",18))
dat_pourc <- cbind(year,dat_pourc)
str(dat_pourc)
dat_pourc[,c(-1)] <- dat_pourc[,c(-1)] %>%
map_dfr(as.numeric)
str(dat_pourc)
## 2018
nmds_2018_pour <- as.data.frame(dat_pourc_18)
nmds_2018_pour <- nmds_2018_pour[,c(1:142)] %>%
map_dfr(as.numeric)
nmds_2018_pour <- as.matrix(nmds_2018_pour)
set.seed(123)
nmds_tot_2018_pour <- metaMDS(nmds_2018_pour, trymax = 100, distance = "bray",
binary = FALSE, na.rm = TRUE)
nmds_tot_2018_pour
stressplot(nmds_tot_2018_pour) # vérification
plot(nmds_tot_2018_pour)
data.scores_2018_pour <- as.data.frame(scores(nmds_tot_2018_pour)) # Sites
data.scores_2018_pour$site <- rownames(dat_pourc_18)
data.scores_2018_pour$secteur <- c(rep("VENEON",5), rep("VALLOUISE",3), rep("MAURIENNE",4), rep("VALLOUISE",4), rep("VILLAROGER",2))
species.scores_2018_pour <- as.data.frame(scores(nmds_tot_2018_pour, "species")) # Taxons
species.scores_2018_pour$species <- rownames(species.scores_2018_pour)
veneon_pour <- data.scores_2018_pour[data.scores_2018_pour$secteur == "VENEON", ][chull(data.scores_2018_pour[data.scores_2018_pour$secteur == "VENEON", c("NMDS1", "NMDS2")]), ]
vallouise_pour <- data.scores_2018_pour[data.scores_2018_pour$secteur == "VALLOUISE", ][chull(data.scores_2018_pour[data.scores_2018_pour$secteur == "VALLOUISE", c("NMDS1", "NMDS2")]), ]
maurienne_pour <- data.scores_2018_pour[data.scores_2018_pour$secteur == "MAURIENNE", ][chull(data.scores_2018_pour[data.scores_2018_pour$secteur == "MAURIENNE", c("NMDS1", "NMDS2")]), ]
villaroger_pour <- data.scores_2018_pour[data.scores_2018_pour$secteur == "VILLAROGER", ][chull(data.scores_2018_pour[data.scores_2018_pour$secteur == "VILLAROGER", c("NMDS1", "NMDS2")]), ]
hull.data_2018_pour <- rbind(veneon_pour, vallouise_pour, maurienne_pour, villaroger_pour)
hull.data_2018_pour
ggplot() +
geom_text_repel(data = species.scores_2018_pour, aes(x = NMDS1, y = NMDS2,
label = species), alpha = 0.5,  color = "grey70") +
geom_point(data = data.scores_2018_pour, aes(x = NMDS1, y = NMDS2, color = secteur),
size = 3.5, alpha = 0.5) +
geom_text_repel(data = data.scores_2018_pour, aes(x = NMDS1, y = NMDS2,
color =  secteur, label = site)) +
geom_point(data = species.scores_2018_pour, aes(x = NMDS1, y = NMDS2), size = 2,
pch = 1, color = "grey70") +
coord_equal() +
theme_bw() +
scale_color_manual(values = c("olivedrab3","orange","turquoise4","blueviolet")) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()) +
ggtitle(label = "NMDS 2018 (stress = 0.1936)")
## 2021
nmds_2021_pour <- as.data.frame(dat_pourc_21[-5,])
nmds_2021_pour <- nmds_2021_pour[,c(1:142)] %>%
map_dfr(as.numeric)
nmds_2021_pour <- as.matrix(nmds_2021_pour)
set.seed(123)
nmds_tot_2021_pour <- metaMDS(nmds_2021_pour, trymax = 100, distance = "bray",
binary = FALSE, na.rm = TRUE)
nmds_tot_2021_pour
stressplot(nmds_tot_2021_pour) # vérification
plot(nmds_tot_2021_pour)
data.scores_2021_pour <- as.data.frame(scores(nmds_tot_2021_pour)) # Sites
data.scores_2021_pour$site <- rownames(dat_pourc_21[-5,])
data.scores_2021_pour$secteur <- c(rep("VENEON",4), rep("VALLOUISE",3), rep("MAURIENNE",4), rep("VALLOUISE",4), rep("VILLAROGER",2))
species.scores_2021_pour <- as.data.frame(scores(nmds_tot_2021_pour, "species")) # Taxons
species.scores_2021_pour$species <- rownames(species.scores_2021_pour)
veneon_pour_21 <- data.scores_2021_pour[data.scores_2021_pour$secteur == "VENEON", ][chull(data.scores_2021_pour[data.scores_2021_pour$secteur == "VENEON", c("NMDS1", "NMDS2")]), ]
vallouise_pour_21 <- data.scores_2021_pour[data.scores_2021_pour$secteur == "VALLOUISE", ][chull(data.scores_2021_pour[data.scores_2021_pour$secteur == "VALLOUISE", c("NMDS1", "NMDS2")]), ]
maurienne_pour_21 <- data.scores_2021_pour[data.scores_2021_pour$secteur == "MAURIENNE", ][chull(data.scores_2021_pour[data.scores_2021_pour$secteur == "MAURIENNE", c("NMDS1", "NMDS2")]), ]
villaroger_pour_21 <- data.scores_2021_pour[data.scores_2021_pour$secteur == "VILLAROGER", ][chull(data.scores_2021_pour[data.scores_2021_pour$secteur == "VILLAROGER", c("NMDS1", "NMDS2")]), ]
hull.data_2021_pour <- rbind(veneon_pour_21, vallouise_pour_21, maurienne_pour_21, villaroger_pour_21)
hull.data_2021_pour
ggplot() +
geom_text_repel(data = species.scores_2021_pour, aes(x = NMDS1, y = NMDS2,
label = species), alpha = 0.5,  color = "grey70") +
geom_point(data = data.scores_2021_pour, aes(x = NMDS1, y = NMDS2, color = secteur),
size = 3.5, alpha = 0.5) +
geom_text_repel(data = data.scores_2021_pour, aes(x = NMDS1, y = NMDS2,
color =  secteur, label = site)) +
geom_point(data = species.scores_2021_pour, aes(x = NMDS1, y = NMDS2), size = 2,
pch = 1, color = "grey70") +
coord_equal() +
theme_bw() +
scale_color_manual(values = c("olivedrab3","orange","turquoise4","blueviolet")) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()) +
ggtitle(label = "NMDS 2021 (stress = 0.1615)")
nmds_1_big <- as.data.frame(dat_pourc[c(-5,-23),]) # On enleve lac torrent
nmds_big <- nmds_1_big[,c(-1)]
str(nmds_big)
nmds_big <- nmds_big %>%
map_dfr(as.numeric)
nmds_big <- as.matrix(nmds_big)
set.seed(123)
nmds_tot <- metaMDS(nmds_big, trymax = 100, distance = "bray",
binary = FALSE)
nmds_tot
year <- c(rep("2018",17), rep("2021",17))
site_tot <- c(rownames(dat_pourc_18[-5,]), rownames(dat_pourc_21[-5,]))
couleurs <- c(rep("turquoise4",4), rep("orange",3), rep("olivedrab3",4), rep("orange",4), rep("blueviolet",2), rep("turquoise4",4), rep("orange",3), rep("olivedrab3",4), rep("orange",4), rep("blueviolet",2))
MultiDyn(MultCOO = nmds_tot$points,
FACTime = factor(year),
FACT2 = factor(site_tot),
COL = couleurs,
ARR = TRUE) # Merci Renaud !
data.scores_tot <- as.data.frame(scores(nmds_tot))
data.scores_tot$site <- site_tot
data.scores_tot$annee <- year
data.scores_tot$secteur <- c(rep("VENEON",4), rep("VALLOUISE",3), rep("MAURIENNE",4), rep("VALLOUISE",4), rep("VILLAROGER",2))
species.scores_tot <- as.data.frame(scores(nmds_tot, "species"))
species.scores_tot$species <- rownames(species.scores_tot)
head(species.scores_tot)
# Ajout des variables env
relev_var <- read.table("data_env_2.csv", header=T, sep=";", dec=".")
str(relev_var)
relev_var[,c(1,2,3,12:17)] <- relev_var[,c(1,2,3,12:17)]  %>%
map_dfr(as.factor)
str(relev_var)
rownames(relev_var) <- paste(relev_var$site,"_",relev_var$annee)
relev_var_moins <- relev_var[c(-5,-23),c(-1:-3)] #on enlève aussi lac torrent
data.envfit_1 <- envfit(nmds_tot,relev_var_moins, na.rm = TRUE)
data.envfit_1
# https://stackoverflow.com/questions/14711470/plotting-envfit-vectors-vegan-package-in-ggplot2
data.envfit_1_df <- as.data.frame(data.envfit_1$vectors$arrows*sqrt(data.envfit_1$vectors$r))
data.scores_tot <- data.scores_tot %>%
separate (site, c("sect", "site"), sep = "_")
ggplot(data = data.scores_tot, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(colour = secteur,
pch = annee, label = site), size = 3.5, alpha = 0.5) +
geom_point(data = species.scores_tot, aes(x = NMDS1, y = NMDS2), size = 2, pch = 1,
color = "grey70") +
geom_label_repel(aes(label = site, colour = secteur),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
fill = "white",
size = 3) +
theme_bw() +
scale_color_manual(values = c("olivedrab3", "orange", "turquoise4", "blueviolet")) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()) +
geom_segment(data = data.envfit_1_df, aes(x=0, xend = NMDS1, y=0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm"))) +
geom_text_repel(data = data.envfit_1_df,aes(x = NMDS1,y = NMDS2,
label = rownames(data.envfit_1_df)), size = 3.5)
anosim(dat_pourc[c(-5,-23),-1], grouping = dat_pourc[c(-5,-23),]$year, permutations = 999, distance = "bray", strata = NULL, parallel = getOption("mc.cores")) # total
ggplot(relev_var, aes(x = annee, y = herb, fill = annee, colour = annee)) +
geom_boxplot(alpha = 0.5, notch = TRUE, outlier.alpha = 0) +
geom_jitter(width = 0.05) +
geom_line(aes(group = site), colour = "gray50") +
theme(legend.position = "none") +
theme_bw() +
scale_fill_jcolors(palette = "pal5") +
scale_color_jcolors(palette = "pal5") +
ggtitle(label = "Recouvrement herbacé, trajectoire(s)")
tapply(relev_var$rich, relev_var$annee, summary)
tapply(relev_var$herb, relev_var$annee, summary)
tapply(relev_var$arbu, relev_var$annee, summary)
tapply(relev_var$sol_nu, relev_var$annee, summary)
tapply(relev_var$cail_plus5, relev_var$annee, summary)
tapply(relev_var$cail_moin5, relev_var$annee, summary)
tapply(relev_var$croute_lit, relev_var$annee, summary)
res.kruskal_annee <- relev_var %>% kruskal.test(herb ~ annee, paired = TRUE)
res.kruskal_annee
ggplot() +
geom_text_repel(data = species.scores_2018_pour, aes(x = NMDS1, y = NMDS2,
label = species), alpha = 0.5,  color = "grey70") +
geom_point(data = data.scores_2018_pour, aes(x = NMDS1, y = NMDS2, color = secteur),
size = 3.5, alpha = 0.5) +
geom_text_repel(data = data.scores_2018_pour, aes(x = NMDS1, y = NMDS2,
color =  secteur, label = site)) +
geom_point(data = species.scores_2018_pour, aes(x = NMDS1, y = NMDS2), size = 2,
pch = 1, color = "grey70") +
coord_equal() +
theme_bw() +
scale_color_manual(values = c("olivedrab3","orange","turquoise4","blueviolet")) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()) +
ggtitle(label = "NMDS 2018 (stress = 0.1936)")
nmds_tot_2018_pour
nmds_tot_2021_pour
nmds_tot
# modifier
species.scores_tot <- species.scores_tot %>%
separate(species, c("Genus", "Species"), sep = " ")
species.scores_tot$Genus_sort <- str_sub(species.scores_tot$Genus,1,3)
species.scores_tot$Species_sort <- str_sub(species.scores_tot$Species,1,3)
species.scores_tot <- species.scores_tot %>%
unite(Short, c("Genus_sort", "Species_sort"), sep = "_")
ggplot(species.scores_tot, aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(label = Short), size = 2, pch = 1,
color = "grey70") +
geom_label_repel(aes(label = Short),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
fill = "white",
size = 3) +
geom_point(data = data.scores_tot, aes(x = NMDS1, y = NMDS2, colour = secteur,
pch = annee, label = site), size = 3.5, alpha = 0.5) +
theme_bw() +
scale_color_manual(values = c("olivedrab3", "orange", "turquoise4", "blueviolet"))
anosim(dat_pourc[c(-5,-23),-1], grouping = dat_pourc[c(-5,-23),]$year, permutations = 999, distance = "bray", strata = NULL, parallel = getOption("mc.cores")) # total
ggplot(relev_var, aes(x = annee, y = herb, fill = annee, colour = annee)) +
geom_boxplot(alpha = 0.5, notch = TRUE, outlier.alpha = 0) +
geom_jitter(width = 0.05) +
geom_line(aes(group = site), colour = "gray50") +
theme(legend.position = "none") +
theme_bw() +
scale_fill_jcolors(palette = "pal5") +
scale_color_jcolors(palette = "pal5") +
ggtitle(label = "Recouvrement herbacé, trajectoire(s)")
tapply(relev_var$rich, relev_var$annee, summary)
tapply(relev_var$herb, relev_var$annee, summary)
tapply(relev_var$arbu, relev_var$annee, summary)
tapply(relev_var$sol_nu, relev_var$annee, summary)
tapply(relev_var$cail_plus5, relev_var$annee, summary)
tapply(relev_var$cail_moin5, relev_var$annee, summary)
tapply(relev_var$croute_lit, relev_var$annee, summary)
res.kruskal_annee <- relev_var %>% kruskal.test(herb ~ annee, paired = TRUE)
res.kruskal_annee
